{"version":3,"sources":["styles.js","App.js","serviceWorker.js","index.js"],"names":["sizes","animation","page","duration","ease","transition","colors","Header","styled","div","HeaderButton","a","HeaderSpace","RootView","PageWrapper","BehindLayer","props","showed","PageContainer","RootContainer","modaling","pushing","ModalContainer","PushContainer","PageContents","LinkButton","p","focus","CenterContainer","ModalPage","state","render","onClick","handleClickClose","event","setState","onClose","setTimeout","React","Component","PushPage","onBack","App","showingModal","showingPush","handleClickModal","handleClickPush","handleCloseModal","handleBackPush","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88ad99c0.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst sizes = {\n  headerHeight: 72\n}\n\n// だいたいこのくらい\nconst animation = {\n  page: {\n    duration: 600,\n    ease: 'cubic-bezier(.17,.71,0,1)'\n  },\n}\nanimation.page.transition = `transform ${animation.page.duration}ms ${animation.page.ease}, opacity ${animation.page.duration}ms ${animation.page.ease}`\n\nconst colors = {\n  primary: \"#3880ff\",\n  secondary: \"#0cd1e8\",\n  border: \"#eeeeee\",\n  white: \"#ffffff\",\n  black: \"#000000\",\n}\n\nconst Header = styled.div`\n  width: 100%;\n  padding:0px 20px;\n  position:absolute;\n  height: ${sizes.headerHeight}px;\n  border-bottom:1px solid ${colors.border};\n  background-color:${colors.white};\n  padding-top:1px;\n  justify-content:space-between;\n  display:flex;\n  align-items:center;\n  box-shadow: 0 2px 2px rgba(200,200,200,.1);\n\n  h1{\n    font-size:20px;\n  }\n`\n\nconst HeaderButton = styled.a`\n  display:inline-block;\n  height:40px;\n  font-size:14px;\n  line-height:38px;\n  border: 1px solid ${colors.primary};\n  border-radius:5px;\n  color:${colors.primary};\n  padding:0px 20px;\n  min-width: 100px;\n  text-align:center;\n  cursor:pointer;\n  :hover{\n    background-color:${colors.primary};\n    color:${colors.white};\n  }\n`\nconst HeaderSpace = styled.div`\n  width:100px;\n`\n\nconst RootView = styled.div``\n\nconst PageWrapper = styled.div`\n  position:fixed;\n  top:0px;left:0px;right:0px;bottom:0px;\n`\n\n// 後ろにある半透明の黒\nconst BehindLayer = styled.div`\n  background-color:${colors.black};\n  opacity: 0;\n  position:absolute;\n  top:0px;left:0px;right:0px;bottom:0px;\n  transition: opacity ${animation.page.duration}ms ease;\n  ${(props)=>props.showed && `\n    opacity:0.3;\n  `}\n`\n\nconst PageContainer = styled.div`\n  height:100%;\n  position:relative;\n  top:0px;\n  transition: ${animation.page.transition};\n`\n\nconst RootContainer = styled(PageContainer)`\n\n  /* 上にモーダルきた時に少しちっさくなるやつ */\n  ${props=>props.modaling && `\n    transform: scale(0.99)\n  `}\n\n  /* プッシュされた時につこし左に行くやつ */\n  ${props=>props.pushing && `\n    transform: translateX(-10vh)\n  `}\n`\n\nconst ModalContainer = styled(PageContainer)`\n  transform: translateY(100vh);\n  ${props=>props.showed && `\n    transform: translateY(0vh);\n  `}\n`\n\nconst PushContainer = styled(PageContainer)`\n  transform: translateX(50vh);\n  opacity: 0;\n  ${props=>props.showed && `\n    opacity: 1.0;\n    transform: translateX(0vh);\n  `}\n`\n\nconst PageContents = styled.div`\n  height:calc(100vh - ${sizes.headerHeight}px);\n  position:relative;\n  top:${sizes.headerHeight}px;\n  overflow-y:scroll;\n  background-color:${colors.white};\n`\n\nconst LinkButton = styled.p`\n  a{\n    display:inline-block;\n    padding:10px 20px;\n    border-radius: 10px;\n    border: 1px solid ${colors.border};\n    cursor:pointer;\n    transition: background-color 300ms ease, transform 300ms ease;\n    :hover{\n      opacity: 0.7;\n    }\n  } \n\n  /* フォーカス残るよう */\n  ${props=>props.focus && `\n    a{\n      background-color:${colors.border};\n      transofrm:scale(0.95);\n    }\n  `}\n`\n\nconst CenterContainer = styled.div`\n  width:100%;\n  height:100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nexport {\n    animation, Header,  HeaderButton, HeaderSpace, RootView, PageWrapper, BehindLayer,\n    RootContainer, ModalContainer, PushContainer , PageContents, LinkButton, CenterContainer\n}","import React from 'react';\n\nimport {\n  animation, Header,  HeaderButton, HeaderSpace, RootView, PageWrapper, BehindLayer,\n  RootContainer, ModalContainer, PushContainer , PageContents, LinkButton, CenterContainer\n} from './styles'\n\nclass ModalPage extends React.Component{\n\n  state = { showed: false }\n\n  componentDidMount(){\n    // アニメーションで表示\n    setTimeout(()=>{\n      this.setState({showed: true})\n    }, 10)\n  }\n\n  render = () =>{\n    const {showed} = this.state\n\n      return <PageWrapper>\n        <BehindLayer showed={showed} />\n      <ModalContainer showed={showed}>\n        <Header>\n          <HeaderButton onClick={this.handleClickClose}>閉じる</HeaderButton>\n            <h1>モーダル</h1>\n          <HeaderSpace />\n        </Header>\n        <PageContents>\n          <CenterContainer>\n            <h1>モーダル</h1>\n          </CenterContainer>\n          </PageContents>\n        </ModalContainer>\n      </PageWrapper>\n  }\n\n  handleClickClose = (event) => {\n    this.setState({showed: false})\n    this.props.onClose()  \n  }\n}\n\nclass PushPage extends React.Component{\n\n  state = { showed: false }\n\n  componentDidMount(){\n    // アニメーションで表示\n    setTimeout(()=>{\n      this.setState({showed: true})\n    }, 10)\n  }\n\n  render = () =>{\n    const {showed} = this.state\n\n      return <PageWrapper>\n        <BehindLayer showed={showed} />\n      <PushContainer showed={showed}>\n        <Header>\n          <HeaderButton onClick={this.handleClickClose}>戻る</HeaderButton>\n            <h1>プッシュ</h1>\n          <HeaderSpace />\n        </Header>\n        <PageContents>\n          <CenterContainer>\n            <h1>プッシュ</h1>\n          </CenterContainer>\n          </PageContents>\n        </PushContainer>\n      </PageWrapper>\n  }\n\n  handleClickClose = (event) => {\n    this.setState({showed: false})\n    this.props.onBack()  \n  }\n}\n\nclass App extends React.Component{\n\n  state = {\n    pushing: false,\n    modaling: false,\n    showingModal: false, \n    showingPush: false \n  }\n\n  render = () => {\n\n    const {modaling, pushing, showingModal, showingPush} = this.state\n\n    return <RootView>\n      <PageWrapper>\n        <RootContainer modaling={modaling} pushing={pushing}>\n          <Header><div /><h1>ページ遷移サンプル</h1><div /></Header>\n          <PageContents>\n            <CenterContainer>\n              <div>\n                {/* 戻ってきた時に分かりやすいようにフォーカスを残す */}\n                <LinkButton focus={showingModal}><a onClick={this.handleClickModal}>モーダル</a></LinkButton>\n                <LinkButton focus={showingPush}><a onClick={this.handleClickPush}>プッシュ</a></LinkButton>\n              </div>\n            </CenterContainer>\n          </PageContents>\n        </RootContainer>\n      </PageWrapper>\n\n      {showingModal && <ModalPage onClose={this.handleCloseModal} />}\n      {showingPush && <PushPage onBack={this.handleBackPush} />}\n      \n    </RootView>\n  }\n\n  handleClickModal = (event) => {\n    this.setState({modaling: true, showingModal:true})\n  }\n\n  handleClickPush = (event) => {\n    this.setState({pushing: true, showingPush: true})\n  }\n\n  handleCloseModal = (event) => {\n    this.setState({\n      modaling: false\n    })\n\n    setTimeout(()=>{\n      this.setState({showingModal: false})\n    }, animation.page.duration)\n  }\n\n  handleBackPush = (event) => {\n    this.setState({pushing: false})\n    setTimeout(()=>{\n      this.setState({showingPush: false})\n    }, animation.page.duration)\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}